#!/usr/bin/env ruby
# frozen_string_literal: true

# Copyright (c) 2023 Alexandre ZANNI (noraj)

require 'yaml'
require 'json'
require 'kramdown'
begin
  # Ruby 3.2
  require 'random/formatter'
rescue LoadError
  # Ruby 3.0
  require 'securerandom'
end
require 'date'

raise ArgumentError, 'Invalid argument count (2 expected)' if ARGV.length != 2

pwndoc_file = ARGV[0]
sysreptor_folder = ARGV[1]

pwndoc_data = YAML.load_file(pwndoc_file)

def to_md(html)
  html ||= ''
  Kramdown::Document.new(html, html_to_native: true).to_kramdown
end

def uuidgen
  # Ruby 3.2
  Random.uuid
rescue LoadError
  # Ruby 3.0
  SecureRandom.uuid
end

# pwndoc locale -> sysreptor language position
LANG_MAP = {
  'en' => 0,
  'fr' => 1
}.freeze

pwndoc_data.each do |pv|
  uuid_main = uuidgen
  sysreptor_data = {
    'format' => 'templates/v2',
    'id' => uuid_main,
    'created' => DateTime.now.rfc3339,
    'updated' => DateTime.now.rfc3339,
    'tags' => [
      pv['category']
    ],
    'translations' => [
      {
        'id' => uuidgen,
        'created' => DateTime.now.rfc3339,
        'updated' => DateTime.now.rfc3339,
        'is_main' => true,
        'language' => 'en-US',
        'status' => 'in-progress',
        'data' => {
          'title' => 'TODO: set title',
          'cvss' => pv['cvssv3'].sub('3.0', '3.1')
        }
      },
      {
        'id' => uuidgen,
        'created' => DateTime.now.rfc3339,
        'updated' => DateTime.now.rfc3339,
        'is_main' => false,
        'language' => 'fr-FR',
        'status' => 'in-progress',
        'data' => {
          'title' => 'TODO: choisir un titre'
        }
      }
    ]
  }
  pv['details'].each do |details|
    pos = LANG_MAP[details['locale']]
    # wrapper for quick access
    translation = sysreptor_data['translations'][pos]['data']
    translation['title'] = details['title']
    translation['references'] = details['references']
    translation['refid'] = details.dig('customFields', 0, 'text')
    translation['summary'] = to_md(details['description'])
    translation['description'] = to_md(details['observation'])
    translation['recommendation'] = to_md(details['remediation'])
    # write back to object
    sysreptor_data['translations'][pos]['data'] = translation
  end
  Dir.mkdir(sysreptor_folder) unless File.exist?(sysreptor_folder)
  File.open("#{sysreptor_folder}/#{uuid_main}.json", 'w') do |file|
    JSON.dump(sysreptor_data, file)
  end
  # Individual archive
  `tar czf #{sysreptor_folder}/#{uuid_main}.tar.gz --directory #{sysreptor_folder} #{uuid_main}.json`
end
# Global archive
`tar -czf #{sysreptor_folder}/all-vulns.tar.gz -C #{sysreptor_folder} $(find #{sysreptor_folder} -maxdepth 1 -type f -name "*.json" -printf "%f\n")`
